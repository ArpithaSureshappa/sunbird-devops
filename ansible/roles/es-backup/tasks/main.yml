- name: ensure backup dir exists
  file: path="{{ es_backup_dir }}" state=directory owner={{ es_user }} group={{ es_user }}

- set_fact:
    es_backup_gzip_file_name: "es_backup_{{ lookup('pipe', 'date +%Z-%Y-%m-%d-%H-%M-%S') }}.tar.gz"

- name: Save backup
  command: curl -u '{{ elastic_user }}:{{ elastic_password }}' -X PUT "http://{{ es_ip }}:9200/_snapshot/my_backup/snapshot_1?wait_for_completion=true&pretty"

- name: Compress Directory
  become: yes
  archive:
    path: "{{ es_backup_dir }}"
    dest: "{{ es_backup_dir }}-{{ es_backup_gzip_file_name }}"
    format: gz

- name: Ensure azure blob storage container exists
  command: az storage container create  --name {{ es_backup_azure_container_name }}
  ignore_errors: true
  environment:
    AZURE_STORAGE_ACCOUNT: "{{ sunbird_management_storage_account_name }}"
    AZURE_STORAGE_KEY: "{{ sunbird_management_storage_account_key }}"

- name: Upload to azure blob storage
  command: az storage blob upload --name "es-backup-{{ es_backup_gzip_file_name }}" --file "{{ es_backup_dir }}-{{ es_backup_gzip_file_name }}" --container-name "{{ es_backup_azure_container_name }}"
  environment:
    AZURE_STORAGE_ACCOUNT: "{{ sunbird_management_storage_account_name }}"
    AZURE_STORAGE_KEY: "{{ sunbird_management_storage_account_key }}"
  async: 3600
  poll: 10

#- name: clean up backup dir after upload
#  file: path="{{ es_backup_dir }}" state=absent
 # file:
 #   path: '{{ item }}'
 #   state: absent
 # with_items:
   # - "{{ es_backup_dir }}"
   # - "{{ es_backup_dir }}-{{ es_backup_gzip_file_name }}"
